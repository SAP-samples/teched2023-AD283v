sap.ui.define(["sap/ui/base/ManagedObject","sap/ui/core/mvc/Controller","sap/ui/demo/todo/controller/App.controller","sap/ui/model/json/JSONModel","sap/ui/model/resource/ResourceModel","sap/ui/Device"],(e,t,r,o,s,i)=>{"use strict";let l;let n;let a;let u;QUnit.module("Test init state",{beforeEach(){l=new r;n=new e({});sinon.stub(t.prototype,"getView").returns(n);a=new o({todos:[]});n.setModel(a)},afterEach(){t.prototype.getView.restore();n.destroy()}});QUnit.test("Check controller's initial state",e=>{l.onInit();e.deepEqual(l.aSearchFilters,[],"Search filters have been instantiated empty");e.deepEqual(l.aTabFilters,[],"Tab filters have been instantiated empty");const t=l.getView().getModel("view").getData();e.deepEqual(t,{isMobile:i.browser.mobile,filterText:undefined})});QUnit.module("Test model modification",{beforeEach(){l=new r;n=new e({});sinon.stub(t.prototype,"getView").returns(n);a=new o({todos:[]});n.setModel(a)},afterEach(){t.prototype.getView.restore();n.destroy()}});QUnit.test("Should add a todo element to the model",e=>{e.strictEqual(a.getObject("/todos").length,0,"There must be no todos defined.");a.setProperty("/todos",[{title:"Completed item",completed:true}]);a.setProperty("/newTodo","new todo item");l.addTodo();e.strictEqual(a.getObject("/todos").length,2,"There are couple items in ToDo list.")});QUnit.test("Should toggle the completed items in the model",e=>{const t={todos:[{title:"Start this app",completed:false}],itemsLeftCount:1};a.setData(t);e.strictEqual(a.getObject("/todos").length,1,"There is one item.");e.strictEqual(a.getProperty("/itemsLeftCount"),1,"There is one item left.");a.setProperty("/todos/0/completed",true);l.updateItemsLeftCount();e.strictEqual(a.getProperty("/itemsLeftCount"),0,"There is no item left.")});QUnit.test("Should clear the completed items",e=>{const t={todos:[{title:"Start this app1",completed:false},{title:"Start this app2",completed:true}],itemsLeftCount:1};a.setData(t);e.strictEqual(a.getObject("/todos").length,2,"There are two items.");e.strictEqual(a.getProperty("/itemsLeftCount"),1,"There is no item left.");l.clearCompleted();l.updateItemsLeftCount();e.strictEqual(a.getObject("/todos").length,1,"There is one item left.");e.strictEqual(a.getProperty("/itemsLeftCount"),1,"There is one item left.")});QUnit.test("Should update items left count when no todos are loaded, yet",e=>{const t={};a.setData(t);e.strictEqual(a.getObject("/todos"),undefined,"There are no items.");e.strictEqual(a.getProperty("/itemsLeftCount"),undefined,"Items left is not set");l.updateItemsLeftCount();e.strictEqual(a.getProperty("/itemsLeftCount"),0,"There is no item left.")});QUnit.module("Test search",{beforeEach(){l=new r;n=new e({});u=new e({});sinon.stub(t.prototype,"getView").returns(n);sinon.stub(t.prototype,"byId").returns(u);sinon.stub(u,"getBinding").returns({filter(){}});a=new o({todos:[]});n.setModel(a);n.setModel(new o({}),"view");n.setModel(new s({bundleName:"sap.ui.demo.todo.i18n.i18n"}),"i18n")},afterEach(){t.prototype.getView.restore();t.prototype.byId.restore();n.destroy();u.destroy()}});QUnit.test("Empty search",e=>{const t={getSource(){return{getValue(){return""}}}};l.onSearch(t);e.strictEqual(l.sSearchQuery,"","The search term is an empty string");e.deepEqual(l.aSearchFilters,[],"Search filters are empty");e.strictEqual(l.getView().getModel().getProperty("/itemsRemovable"),true,"Button toggle is properly set")});QUnit.test("Do a search",e=>{const t="ToDo item";const r={getSource(){return{getValue(){return t}}}};l.onSearch(r);e.strictEqual(l.sSearchQuery,t,"The search term is an empty string");e.strictEqual(l.aSearchFilters.length,1,"A search filter is constructed");e.strictEqual(l.getView().getModel().getProperty("/itemsRemovable"),false,"Button toggle is properly set")});QUnit.module("Test filtering",{beforeEach(){l=new r;n=new e({});u=new e({});sinon.stub(t.prototype,"getView").returns(n);sinon.stub(t.prototype,"byId").returns(u);sinon.stub(u,"getBinding").returns({filter(){}});a=new o({todos:[]});n.setModel(a);n.setModel(new o({}),"view");n.setModel(new s({bundleName:"sap.ui.demo.todo.i18n.i18n"}),"i18n")},afterEach(){t.prototype.getView.restore();t.prototype.byId.restore();n.destroy();u.destroy()}});QUnit.test("Toggle filters",e=>{let t="";const r={getParameter(){return{getKey(){return t}}}};l.aSearchFilters=[];l.onFilter(r);e.strictEqual(l.sFilterKey,t,"Correct filter key is applied");e.strictEqual(l.aTabFilters.length,0,"Empty key == no filter");t="active";l.onFilter(r);e.strictEqual(l.sFilterKey,t,"Correct filter key is applied");e.strictEqual(l.aTabFilters.length,1,"A filter is constructed");t="completed";l.onFilter(r);e.strictEqual(l.sFilterKey,t,"Correct filter key is applied");e.strictEqual(l.aTabFilters.length,1,"A filter is constructed");t="completed";l.sSearchQuery="test";l.onFilter(r);e.strictEqual(l.sFilterKey,t,"Correct filter key is applied");e.strictEqual(l.aTabFilters.length,1,"A filter is constructed");t="all";l.onFilter(r);e.strictEqual(l.sFilterKey,t,"Correct filter key is applied");e.strictEqual(l.aTabFilters.length,0,"Cleans up filters")})});
//# sourceMappingURL=App.controller.js.map